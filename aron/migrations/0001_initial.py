# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings
import aron.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Classes',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('group', models.CharField(help_text='Obbligatorio. Identificativo della Classe', max_length='20', verbose_name='Group')),
                ('internet', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Internet - Classes',
            },
        ),
        migrations.CreateModel(
            name='IP',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ip', models.GenericIPAddressField(help_text='Indirizzo IP', unique=True, verbose_name='Indirizzo IP')),
                ('groups', models.ForeignKey(to='aron.Classes')),
            ],
            options={
                'verbose_name_plural': 'Internet - IP',
            },
        ),
        migrations.CreateModel(
            name='MAC',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('mac', aron.models.MACAddressField(help_text='Obbligatorio. Devi inserire la MAC in formato AA:BB:CC:DD:EE:FF', max_length=17, verbose_name='Indirizzo MAC')),
                ('groups', models.ForeignKey(to='aron.Classes')),
            ],
            options={
                'verbose_name_plural': 'Internet - MAC',
            },
        ),
        migrations.CreateModel(
            name='VeximDomains',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('domain', models.CharField(help_text='Dominio virtuale di Posta Elettronica', unique=True, max_length=128, verbose_name='Dominio')),
                ('enabled', models.BooleanField(default=True)),
                ('maxmsgsize', models.IntegerField(default=10485760, help_text='Misura del messaggio in MegaBytes', verbose_name='Massima misura del messagio')),
                ('max_accounts', models.IntegerField(default=0, help_text='Massimo di account disponibili per questo dominio. Il zero definici ilimitato.')),
                ('type', models.CharField(default='local', help_text='Tipo di dominio Local o Relay', max_length=5, verbose_name='Tipo Dominio', choices=[('local', 'Local'), ('relay', 'Relay')])),
                ('avscan', models.BooleanField(default=False, help_text='Abilitare Antivirus', verbose_name='Antivirus')),
                ('spamassassin', models.BooleanField(default=False, help_text='Abilitare Spamassassin', verbose_name='SPAM Assassin')),
                ('mailinglists', models.BooleanField(default=False, help_text='Abilitare Lista distribuzioni', verbose_name='Lista distribuzioni')),
                ('sa_tag', models.IntegerField(default=5, help_text='Score minimo per controllo Spamassasin', verbose_name='SPAM Assassin TAG')),
                ('sa_refuse', models.IntegerField(default=10, help_text='Score massimo per controllo Spamassasin', verbose_name='SPAM Assassin Refiuto')),
                ('maildir', models.CharField(default=b'/srv/vmail/', max_length=128)),
                ('uid', models.IntegerField(default=999)),
                ('gid', models.IntegerField(default=999)),
                ('blocklists', models.BooleanField(default=False)),
                ('complexpass', models.BooleanField(default=False)),
                ('pipe', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Posta - Dominio',
            },
        ),
        migrations.CreateModel(
            name='VeximUsers',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('passwd', models.CharField(max_length=64)),
                ('localpart', models.EmailField(help_text='Indirizzo mail del dominio selezzionato', max_length=64)),
                ('on_avscan', models.BooleanField(default=True, help_text='Abilitare Antivirus', verbose_name='Antivirus')),
                ('on_spamassassin', models.BooleanField(default=True, verbose_name='SPAM Assassin')),
                ('on_forward', models.BooleanField(default=False, help_text="Inoltra mail un'altro indirizzo", verbose_name='Attivazione Inoltro')),
                ('forward', models.EmailField(max_length=32, verbose_name='Indirizzo mail inoltro', blank=True)),
                ('unseen', models.BooleanField(default=False, help_text='Indirizzo mail cego', verbose_name='Posta non visibile')),
                ('on_vacation', models.BooleanField(default=False, help_text='Abilitare vacance', verbose_name='Vacanze')),
                ('vacation', models.TextField(help_text='Scrivi il messaggio delle vacanze', verbose_name='Testo ferie', blank=True)),
                ('maxmsgsize', models.IntegerField(default=10485760, help_text='Massima misura del messaggio in bytes', verbose_name='Massima misura del messaggio.')),
                ('quota', models.IntegerField(default=1073741824, help_text='Massima misura della casella in bytes')),
                ('sa_tag', models.IntegerField(default=5, help_text='Score minimo per Spamassassin', verbose_name='SPAM Assassin Minimo')),
                ('sa_refuse', models.IntegerField(default=10, help_text='Score minimo per Spamassassin', verbose_name='SPAM Assassin Massimo')),
                ('on_blocklist', models.BooleanField(default=False)),
                ('on_complexpass', models.BooleanField(default=False)),
                ('on_piped', models.BooleanField(default=False)),
                ('username', models.CharField(max_length=64, verbose_name='Login')),
                ('enabled', models.BooleanField(default=True, help_text='Utente Abilitato')),
                ('uid', models.IntegerField(default=999)),
                ('gid', models.IntegerField(default=999)),
                ('smtp', models.CharField(max_length=64)),
                ('pop', models.CharField(max_length=64)),
                ('type', models.CharField(default=b'local', max_length=8)),
                ('domain', models.ForeignKey(to='aron.VeximDomains')),
                ('user', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Posta - Account',
            },
        ),
        migrations.CreateModel(
            name='WebContentFilter',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('abortion', models.BooleanField(default=False, help_text='Abortion information excluding when related to religion')),
                ('ads', models.BooleanField(default=False, help_text='Advert servers and banned URLs')),
                ('adult', models.BooleanField(default=False, help_text='Sites containing adult material such as swearing but not porn')),
                ('aggressive', models.BooleanField(default=False, help_text='Similar to violence but more promoting than depicting')),
                ('antispyware', models.BooleanField(default=False, help_text='Sites that remove spyware')),
                ('artnudes', models.BooleanField(default=False, help_text='Art sites containing artistic nudity')),
                ('astrology', models.BooleanField(default=False, help_text='Astrology websites')),
                ('banking', models.BooleanField(default=False, help_text='Banking websites')),
                ('beerliquorinfo', models.BooleanField(default=False, help_text='Sites with information only on beer or liquors')),
                ('beerliquorsale', models.BooleanField(default=False, help_text='Sites with beer or liquors for sale')),
                ('blog', models.BooleanField(default=False, help_text='Journal/Diary websites')),
                ('cellphones', models.BooleanField(default=False, help_text='Stuff for mobile/cell phones')),
                ('chat', models.BooleanField(default=False, help_text='Sites with chat rooms etc')),
                ('childcare', models.BooleanField(default=False, help_text='Sites to do with childcare')),
                ('cleaning', models.BooleanField(default=False, help_text='Sites to do with cleaning')),
                ('clothing', models.BooleanField(default=False, help_text='Sites about and selling clothing')),
                ('contraception', models.BooleanField(default=False, help_text='Information about contraception')),
                ('culnary', models.BooleanField(default=False, help_text='Sites about cooking et al')),
                ('dating', models.BooleanField(default=False, help_text='Sites about dating')),
                ('desktopsillies', models.BooleanField(default=False, help_text='Sites containing screen savers, backgrounds, cursers, pointers. desktop themes and similar timewasting and potentially dangerous content')),
                ('dialers', models.BooleanField(default=False, help_text='Sites with dialers such as those for pornography or trojans')),
                ('drugs', models.BooleanField(default=False, help_text='Drug related sites')),
                ('ecommerce', models.BooleanField(default=False, help_text='Sites that provide online shopping')),
                ('entertainment', models.BooleanField(default=False, help_text='Sites that promote movies, books, magazine, humor')),
                ('filehosting', models.BooleanField(default=False, help_text='Sites to do with filehosting')),
                ('frencheducation', models.BooleanField(default=False, help_text='Sites to do with french education')),
                ('gambling', models.BooleanField(default=False, help_text='Gambling sites including stocks and shares')),
                ('games', models.BooleanField(default=False, help_text='Game related sites')),
                ('gardening', models.BooleanField(default=False, help_text='Gardening sites')),
                ('government', models.BooleanField(default=False, help_text='Military and schools etc')),
                ('guns', models.BooleanField(default=False, help_text='Sites with guns')),
                ('hacking', models.BooleanField(default=False, help_text='Hacking/cracking information')),
                ('homerepair', models.BooleanField(default=False, help_text='Sites about home repair')),
                ('hygiene', models.BooleanField(default=False, help_text='Sites about hygiene and other personal grooming related stuff')),
                ('instantmessaging', models.BooleanField(default=False, help_text='Sites that contain messenger client download and web-based messaging sites')),
                ('jewelry', models.BooleanField(default=False, help_text='Sites about and selling jewelry')),
                ('jobsearch', models.BooleanField(default=False, help_text='Sites for finding jobs')),
                ('kidstimewasting', models.BooleanField(default=False, help_text='Sites kids often waste time on')),
                ('mail', models.BooleanField(default=False, help_text='Webmail and email sites')),
                ('marketingware', models.BooleanField(default=False, help_text='Sites about marketing products')),
                ('medical', models.BooleanField(default=False, help_text='Medical websites')),
                ('mixed_adult', models.BooleanField(default=False, help_text='Mixed adult content sites')),
                ('naturism', models.BooleanField(default=False, help_text='Sites that contain nude pictures and/or promote a nude lifestyle')),
                ('news', models.BooleanField(default=False, help_text='News sites')),
                ('onlineauctions', models.BooleanField(default=False, help_text='Online auctions')),
                ('onlinegames', models.BooleanField(default=False, help_text='Online gaming sites')),
                ('onlinepayment', models.BooleanField(default=False, help_text='Online payment sites')),
                ('personalfinance', models.BooleanField(default=False, help_text='Personal finance sites')),
                ('pets', models.BooleanField(default=False, help_text='Pet sites')),
                ('phishing', models.BooleanField(default=False, help_text='Sites attempting to trick people into giving out private information.')),
                ('porn', models.BooleanField(default=False, help_text='Pornography')),
                ('proxy', models.BooleanField(default=False, help_text='Sites with proxies to bypass filters')),
                ('radio', models.BooleanField(default=False, help_text='non-news related radio and television')),
                ('religion', models.BooleanField(default=False, help_text='Sites promoting religion')),
                ('ringtones', models.BooleanField(default=False, help_text='Sites containing ring tones, games, pictures and other')),
                ('searchengines', models.BooleanField(default=False, help_text='Search engines such as google')),
                ('sect', models.BooleanField(default=False, help_text='Sites about eligious groups')),
                ('sexuality', models.BooleanField(default=False, help_text='Sites dedicated to sexuality, possibly including adult material but excluding educational material')),
                ('sexualityeducation', models.BooleanField(default=False, help_text='\tSites relating to educational information about sexuality.')),
                ('shopping', models.BooleanField(default=False, help_text='Shopping sites')),
                ('socialnetworking', models.BooleanField(default=False, help_text='Social networking websites')),
                ('sportnews', models.BooleanField(default=False, help_text='Sport news sites')),
                ('sports', models.BooleanField(default=False, help_text='All sport sites')),
                ('spyware', models.BooleanField(default=False, help_text='Sites who run or have spyware software to download')),
                ('updatesites', models.BooleanField(default=False, help_text='Sites where software updates are downloaded from including virus sigs')),
                ('vacation', models.BooleanField(default=False, help_text='Sites about going on holiday')),
                ('violence', models.BooleanField(default=False, help_text='Sites containing violence')),
                ('virusinfected', models.BooleanField(default=False, help_text='Sites who host virus infected files')),
                ('warez', models.BooleanField(default=False, help_text='Sites with illegal pirate software')),
                ('weather', models.BooleanField(default=False, help_text='Weather news sites and weather related')),
                ('weapons', models.BooleanField(default=False, help_text='Sites detailing or selling weapons')),
                ('webmail', models.BooleanField(default=False, help_text='Just webmail sites')),
                ('whitelist', models.BooleanField(default=False, help_text='Contains site specifically 100% suitable for kids')),
            ],
            options={
                'verbose_name_plural': 'Internet - Web Content Filter',
            },
        ),
    ]
